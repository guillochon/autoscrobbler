[project]
name = "autoscrobbler"
version = "0.1.0"
description = "Passive audio scrobbler: identifies songs from microphone and scrobbles to Last.fm."
authors = [
    { name = "Your Name", email = "your@email.com" }
]
requires-python = ">=3.9"
dependencies = [
    "shazamio",
    "pylast",
    "sounddevice",
    "soundfile",
    "numpy"
]
[project.optional-dependencies]
dev = [
    "ruff>=0.0.292",
    "pre-commit>=3.5.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
]

[tool.uv]

[tool.hatch.build.targets.wheel]
packages = ["autoscrobbler"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=autoscrobbler",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["autoscrobbler"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/.env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80
show_missing = true
precision = 2
